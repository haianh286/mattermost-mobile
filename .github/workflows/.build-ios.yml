---
name: build-ios
on:
  workflow_call:
    # If any of these is set to an empty value, its corresponding env var will not be set
    inputs:
      app_name:
        required: false
        type: string
      app_scheme:
        required: false
        type: string
      aws_bucket_name:
        required: false
        type: string
      aws_folder_name:
        required: false
        type: string
      aws_region:
        required: false
        type: string
      beta_build:
        required: false
        type: string
      build_for_release:
        required: false
        type: string
      build_pr:
        required: false
        type: string
      extension_app_identifier:
        required: false
        type: string
      branch_to_build:
        required: false
        type: string
      build_artifact_name:
        required: true
        type: string
      build_type:
        # Valid values: signed, unsigned, simulator
        required: true
        type: string
      ios_app_group:
        required: false
        type: string
      ios_build_export_method:
        required: false
        type: string
      ios_icloud_container:
        required: false
        type: string
      main_app_identifier:
        required: false
        type: string
      match_app_identifier:
        required: false
        type: string
      match_readonly:
        required: false
        type: string
      match_shallow_clone:
        required: false
        type: string
      match_skip_docs:
        required: false
        type: string
      match_type:
        required: false
        type: string
      babel_env:
        required: false
        type: string
        default: "production"
      node_env:
        required: false
        type: string
        default: "production"
      node_options:
        required: false
        type: string
        default: "--max_old_space_size=12000"
      notification_service_identifier:
        required: false
        type: string
      pilot_skip_waiting_for_build_processing:
        required: false
        type: string
      replace_assets:
        required: false
        type: string
      sentry_enabled:
        required: false
        type: string
      show_onboarding:
        required: false
        type: string
      sync_provisioning_profiles:
        required: false
        type: string
      tag:
        required: false
        type: string
    secrets:
      aws_access_key_id:
        required: false
      aws_secret_access_key:
        required: false
      fastlane_team_id:
        required: false
      gh_token:
        required: false
      ios_api_issuer_id:
        required: false
      ios_api_key:
        required: false
      ios_api_key_id:
        required: false
      match_git_url:
        required: false
      match_password:
        required: false
      mattermost_webhook_url:
        required: false
      private_deploy_key:
        required: false
      sentry_auth_token:
        required: false
      sentry_dsn_ios:
        required: false
      sentry_org:
        required: false
      sentry_project_ios:
        required: false

jobs:
  build-ios:
    runs-on: macos-11
    steps:
    - name: ci/generate-env
      run: |
        # Using this method instead of the workflow-level `env`, to avoid setting variables with empty values
        # Note that multiline strings require a different notation: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        [ -z "${{ inputs.branch_to_build }}" ]                         || echo 'BRANCH_TO_BUILD=${{ inputs.branch_to_build }}' >> $GITHUB_ENV
        [ -z "${{ inputs.app_name }}" ]                                || echo 'APP_NAME=${{ inputs.app_name }}' >> $GITHUB_ENV
        [ -z "${{ inputs.app_scheme }}" ]                              || echo 'APP_SCHEME=${{ inputs.app_scheme }}' >> $GITHUB_ENV
        [ -z "${{ secrets.aws_access_key_id }}" ]                      || echo 'AWS_ACCESS_KEY_ID=${{ secrets.aws_access_key_id }}' >> $GITHUB_ENV
        [ -z "${{ secrets.aws_secret_access_key }}" ]                  || echo 'AWS_SECRET_ACCESS_KEY=${{ secrets.aws_secret_access_key }}' >> $GITHUB_ENV
        [ -z "${{ inputs.aws_bucket_name }}" ]                         || echo 'AWS_BUCKET_NAME=${{ inputs.aws_bucket_name }}' >> $GITHUB_ENV
        [ -z "${{ inputs.aws_folder_name }}" ]                         || echo 'AWS_FOLDER_NAME=${{ inputs.aws_folder_name }}' >> $GITHUB_ENV
        [ -z "${{ inputs.aws_region }}" ]                              || echo 'AWS_REGION=${{ inputs.aws_region }}' >> $GITHUB_ENV
        [ -z "${{ inputs.beta_build }}" ]                              || echo 'BETA_BUILD=${{ inputs.beta_build }}' >> $GITHUB_ENV
        [ -z "${{ inputs.build_for_release }}" ]                       || echo 'BUILD_FOR_RELEASE=${{ inputs.build_for_release }}' >> $GITHUB_ENV
        [ -z "${{ inputs.build_pr }}" ]                                || echo 'BUILD_PR=${{ inputs.build_pr }}' >> $GITHUB_ENV
        [ -z "${{ inputs.extension_app_identifier }}" ]                || echo 'EXTENSION_APP_IDENTIFIER=${{ inputs.extension_app_identifier }}' >> $GITHUB_ENV
        [ -z "${{ secrets.fastlane_team_id }}" ]                       || echo 'FASTLANE_TEAM_ID=${{ secrets.fastlane_team_id }}' >> $GITHUB_ENV
        [ -z "${{ secrets.gh_token }}" ]                               || echo 'GITHUB_TOKEN=${{ secrets.gh_token }}' >> $GITHUB_ENV
        [ -z "${{ secrets.ios_api_issuer_id }}" ]                      || echo 'IOS_API_ISSUER_ID=${{ secrets.ios_api_issuer_id }}' >> $GITHUB_ENV
        if [ -n "${{ secrets.ios_api_key }}" ]; then
          cat <<EOF >>$GITHUB_ENV
        IOS_API_KEY<<INNEREOF
        ${{ secrets.ios_api_key }}
        INNEREOF
        EOF
        fi
        [ -z "${{ secrets.ios_api_key_id }}" ]                         || echo 'IOS_API_KEY_ID=${{ secrets.ios_api_key_id }}' >> $GITHUB_ENV
        [ -z "${{ inputs.ios_app_group }}" ]                           || echo 'IOS_APP_GROUP=${{ inputs.ios_app_group }}' >> $GITHUB_ENV
        [ -z "${{ inputs.ios_build_export_method }}" ]                 || echo 'IOS_BUILD_EXPORT_METHOD=${{ inputs.ios_build_export_method }}' >> $GITHUB_ENV
        [ -z "${{ inputs.ios_icloud_container }}" ]                    || echo 'IOS_ICLOUD_CONTAINER=${{ inputs.ios_icloud_container }}' >> $GITHUB_ENV
        [ -z "${{ inputs.main_app_identifier }}" ]                     || echo 'MAIN_APP_IDENTIFIER=${{ inputs.main_app_identifier }}' >> $GITHUB_ENV
        [ -z "${{ inputs.match_app_identifier }}" ]                    || echo 'MATCH_APP_IDENTIFIER=${{ inputs.match_app_identifier }}' >> $GITHUB_ENV
        [ -z "${{ inputs.match_readonly }}" ]                          || echo 'MATCH_READONLY=${{ inputs.match_readonly }}' >> $GITHUB_ENV
        [ -z "${{ inputs.match_shallow_clone }}" ]                     || echo 'MATCH_SHALLOW_CLONE=${{ inputs.match_shallow_clone }}' >> $GITHUB_ENV
        [ -z "${{ inputs.match_skip_docs }}" ]                         || echo 'MATCH_SKIP_DOCS=${{ inputs.match_skip_docs }}' >> $GITHUB_ENV
        [ -z "${{ secrets.match_git_url }}" ]                          || echo 'MATCH_GIT_URL=${{ secrets.match_git_url }}' >> $GITHUB_ENV
        [ -z "${{ secrets.match_password }}" ]                         || echo 'MATCH_PASSWORD=${{ secrets.match_password }}' >> $GITHUB_ENV
        [ -z "${{ inputs.match_type }}" ]                              || echo 'MATCH_TYPE=${{ inputs.match_type }}' >> $GITHUB_ENV
        [ -z "${{ secrets.mattermost_webhook_url }}" ]                 || echo 'MATTERMOST_WEBHOOK_URL=${{ secrets.mattermost_webhook_url }}' >> $GITHUB_ENV
        [ -z "${{ inputs.notification_service_identifier }}" ]         || echo 'NOTIFICATION_SERVICE_IDENTIFIER=${{ inputs.notification_service_identifier }}' >> $GITHUB_ENV
        [ -z "${{ inputs.node_env }}" ]                                || echo 'NODE_ENV=${{ inputs.node_env }}' >> $GITHUB_ENV
        [ -z "${{ inputs.node_options }}" ]                            || echo 'NODE_OPTIONS=${{ inputs.node_options }}' >> $GITHUB_ENV
        [ -z "${{ inputs.babel_env }}" ]                               || echo 'BABEL_ENV=${{ inputs.babel_env }}' >> $GITHUB_ENV
        [ -z "${{ inputs.pilot_skip_waiting_for_build_processing }}" ] || echo 'PILOT_SKIP_WAITING_FOR_BUILD_PROCESSING=${{ inputs.pilot_skip_waiting_for_build_processing }}' >> $GITHUB_ENV
        [ -z "${{ inputs.replace_assets }}" ]                          || echo 'REPLACE_ASSETS=${{ inputs.replace_assets }}' >> $GITHUB_ENV
        [ -z "${{ secrets.sentry_auth_token }}" ]                      || echo 'SENTRY_AUTH_TOKEN=${{ secrets.sentry_auth_token }}' >> $GITHUB_ENV
        [ -z "${{ secrets.sentry_dsn_ios }}" ]                         || echo 'SENTRY_DSN_IOS=${{ secrets.sentry_dsn_ios }}' >> $GITHUB_ENV
        [ -z "${{ inputs.sentry_enabled }}" ]                          || echo 'SENTRY_ENABLED=${{ inputs.sentry_enabled }}' >> $GITHUB_ENV
        [ -z "${{ secrets.sentry_org }}" ]                             || echo 'SENTRY_ORG=${{ secrets.sentry_org }}' >> $GITHUB_ENV
        [ -z "${{ secrets.sentry_project_ios }}" ]                     || echo 'SENTRY_PROJECT_IOS=${{ secrets.sentry_project_ios }}' >> $GITHUB_ENV
        [ -z "${{ inputs.show_onboarding }}" ]                         || echo 'SHOW_ONBOARDING=${{ inputs.show_onboarding }}' >> $GITHUB_ENV
        [ -z "${{ inputs.sync_provisioning_profiles }}" ]              || echo 'SYNC_PROVISIONING_PROFILES=${{ inputs.sync_provisioning_profiles }}' >> $GITHUB_ENV
        [ -z "${{ inputs.tag }}" ]                                     || echo 'TAG=${{ inputs.tag }}' >> $GITHUB_ENV
    - name: ci/checkout-repo
      uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
    - name: ci/node-prepare
      uses: ./.github/actions/node-prepare
    - name: ci/pods-dependencies
      uses: ./.github/actions/pods-dependencies
    - name: ci/generate-assets
      uses: ./.github/actions/generate-assets
    - name: ci/fastlane-dependencies
      uses: ./.github/actions/fastlane-dependencies
      with:
        os: ios
    - name: ci/output-ssh-private-key
      run: |
        mkdir -p ~/.ssh
        echo '${{ secrets.private_deploy_key }}' > ~/.ssh/id_rsa
        chmod 0600 ~/.ssh/id_rsa
      if: "${{ secrets.private_deploy_key != '' }}"
    # Build iOS app, method depends on the value of `build_type`
    - name: ci/build-ios-signed
      working-directory: ./fastlane
      run: |
        HOMEBREW_NO_AUTO_UPDATE=1 brew install watchman
        export TERM=xterm && bundle exec fastlane ios build
      if: "${{ inputs.build_type == 'signed' }}"
    - name: ci/build-ios-unsigned
      working-directory: ./fastlane
      run: |
        HOMEBREW_NO_AUTO_UPDATE=1 brew install watchman
        bundle exec fastlane ios unsigned
      if: "${{ inputs.build_type == 'unsigned' }}"
    - name: ci/build-ios-simulator
      working-directory: ./fastlane
      run: |
        HOMEBREW_NO_AUTO_UPDATE=1 brew install watchman
        bundle exec fastlane ios simulator
      if: "${{ inputs.build_type == 'simulator' }}"
    # Upload the build artifact, its path depends on the value of `build_type`
    - name: ci/upload-ios-buld
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
      with:
        name: "${{ inputs.build_artifact_name }}"
        path: "*.ipa"
      if: "${{ inputs.build_type == 'signed' || inputs.build_type == 'unsigned' }}"
    - name: ci/upload-ios-buld-simulator
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
      with:
        name: "${{ inputs.build_artifact_name }}"
        path: "Mattermost-simulator-x86_64.app.zip"
      if: "${{ inputs.build_type == 'simulator' }}"