// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PostDraft Should render the Archived for channelIsArchived 1`] = `
<View
  style={
    {
      "backgroundColor": "#ffffff",
      "borderTopColor": "rgba(63,67,80,0.2)",
      "borderTopWidth": 1,
      "paddingBottom": 10,
      "paddingLeft": 20,
      "paddingRight": 20,
      "paddingTop": 10,
    }
  }
  testID="post_draft.archived"
>
  <Text>
    <Text
      style={
        [
          {
            "color": "#3f4350",
            "textAlign": "center",
          },
          [
            undefined,
          ],
        ]
      }
    >
      You are viewing an 
    </Text>
    <Text
      style={
        [
          {
            "color": "#3f4350",
            "textAlign": "center",
          },
          [
            undefined,
            {
              "fontWeight": "bold",
            },
          ],
        ]
      }
    >
      archived channel
    </Text>
    <Text
      style={
        [
          {
            "color": "#3f4350",
            "textAlign": "center",
          },
          [
            undefined,
          ],
        ]
      }
    >
      . New messages cannot be posted.
    </Text>
  </Text>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "alignItems": "center",
        "backgroundColor": "#1c58d9",
        "borderRadius": 4,
        "height": 40,
        "marginTop": 10,
        "opacity": 1,
        "paddingBottom": 5,
        "paddingTop": 5,
      }
    }
  >
    <Text
      style={
        {
          "color": "white",
          "fontWeight": "bold",
          "marginTop": 7,
        }
      }
    >
      Close Channel
    </Text>
  </View>
</View>
`;

exports[`PostDraft Should render the Archived for deactivatedChannel 1`] = `
<View
  style={
    {
      "backgroundColor": "#ffffff",
      "borderTopColor": "rgba(63,67,80,0.2)",
      "borderTopWidth": 1,
      "paddingBottom": 10,
      "paddingLeft": 20,
      "paddingRight": 20,
      "paddingTop": 10,
    }
  }
  testID="post_draft.archived"
>
  <Text>
    <Text
      style={
        [
          {
            "color": "#3f4350",
            "textAlign": "center",
          },
          [
            undefined,
          ],
        ]
      }
    >
      You are viewing an 
    </Text>
    <Text
      style={
        [
          {
            "color": "#3f4350",
            "textAlign": "center",
          },
          [
            undefined,
            {
              "fontWeight": "bold",
            },
          ],
        ]
      }
    >
      archived channel
    </Text>
    <Text
      style={
        [
          {
            "color": "#3f4350",
            "textAlign": "center",
          },
          [
            undefined,
          ],
        ]
      }
    >
      . New messages cannot be posted.
    </Text>
  </Text>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "alignItems": "center",
        "backgroundColor": "#1c58d9",
        "borderRadius": 4,
        "height": 40,
        "marginTop": 10,
        "opacity": 1,
        "paddingBottom": 5,
        "paddingTop": 5,
      }
    }
  >
    <Text
      style={
        {
          "color": "white",
          "fontWeight": "bold",
          "marginTop": 7,
        }
      }
    >
      Close Channel
    </Text>
  </View>
</View>
`;

exports[`PostDraft Should render the DraftInput 1`] = `
<KeyboardTrackingView
  inverted={false}
>
  <View
    collapsable={false}
    style={
      {
        "bottom": 0,
      }
    }
  >
    <Text
      ellipsizeMode="tail"
      numberOfLines={1}
      style={
        {
          "backgroundColor": "transparent",
          "color": "#3f4350",
          "fontSize": 11,
          "marginBottom": 2,
          "paddingLeft": 10,
          "paddingTop": 3,
          "position": "absolute",
        }
      }
    />
  </View>
  <RNCSafeAreaView
    edges={
      [
        "left",
        "right",
      ]
    }
    onLayout={[Function]}
    style={
      {
        "alignItems": "flex-end",
        "backgroundColor": "#ffffff",
        "borderTopColor": "rgba(63,67,80,0.2)",
        "borderTopWidth": 1,
        "flexDirection": "row",
        "justifyContent": "center",
        "paddingBottom": 2,
      }
    }
    testID="post_draft"
  >
    <RCTScrollView
      contentContainerStyle={
        {
          "alignItems": "stretch",
          "paddingTop": 7,
        }
      }
      disableScrollViewPanResponder={true}
      keyboardShouldPersistTaps="always"
      overScrollMode="never"
      pinchGestureEnabled={false}
      scrollEnabled={false}
      showsHorizontalScrollIndicator={false}
      showsVerticalScrollIndicator={false}
      style={
        {
          "flex": 1,
          "flexDirection": "column",
        }
      }
    >
      <View>
        <PasteInput
          accessible={true}
          allowFontScaling={true}
          autoCapitalize="sentences"
          autoCompleteType="off"
          blurOnSubmit={false}
          disableCopyPaste={false}
          disableFullscreenUI={true}
          focusable={false}
          keyboardAppearance="light"
          keyboardType="default"
          mostRecentEventCount={0}
          multiline={true}
          onBlur={[Function]}
          onChange={[Function]}
          onChangeText={[Function]}
          onClick={[Function]}
          onEndEditing={[Function]}
          onFocus={[Function]}
          onPaste={[Function]}
          onPressIn={[Function]}
          onPressOut={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onScroll={[Function]}
          onSelectionChange={[Function]}
          onStartShouldSetResponder={[Function]}
          placeholder="Write to "
          placeholderTextColor="rgba(63,67,80,0.5)"
          screenId="NavigationScreen1"
          style={
            [
              {
                "color": "#3f4350",
                "fontSize": 15,
                "lineHeight": 20,
                "maxHeight": 150,
                "minHeight": 30,
                "paddingBottom": 6,
                "paddingHorizontal": 12,
                "paddingTop": 6,
              },
            ]
          }
          testID="post_draft.post.input"
          textContentType="none"
          underlineColorAndroid="transparent"
        />
        <View
          style={
            {
              "display": "flex",
              "flexDirection": "column",
            }
          }
        >
          <View
            collapsable={false}
            forwardedRef={[Function]}
            isInteraction={true}
            style={
              {
                "display": "flex",
                "flexDirection": "row",
                "height": 0,
                "paddingBottom": 0,
              }
            }
          >
            <RCTScrollView
              contentContainerStyle={
                {
                  "alignItems": "flex-end",
                  "paddingRight": 12,
                }
              }
              horizontal={true}
              keyboardShouldPersistTaps="handled"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View />
            </RCTScrollView>
          </View>
          <View
            collapsable={false}
            forwardedRef={[Function]}
            isInteraction={true}
            style={
              {
                "height": 0,
              }
            }
          >
            <View
              style={
                {
                  "flex": 1,
                  "marginHorizontal": 12,
                  "marginTop": 4,
                }
              }
            />
          </View>
        </View>
        <View
          style={
            {
              "alignItems": "center",
              "display": "flex",
              "flexDirection": "row",
              "justifyContent": "space-between",
              "paddingBottom": 1,
            }
          }
        >
          <View
            style={
              {
                "display": "flex",
                "flexDirection": "row",
                "height": 44,
              }
            }
            testID="post_draft.quick_actions"
          >
            <View
              accessibilityState={
                {
                  "disabled": false,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "opacity": 1,
                  "padding": 10,
                }
              }
              testID="post_draft.quick_actions.at_input_action"
            >
              <Icon
                color="rgba(63,67,80,0.64)"
                name="at"
                size={24}
              />
            </View>
            <View
              accessibilityState={
                {
                  "disabled": false,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "opacity": 1,
                  "padding": 10,
                }
              }
              testID="post_draft.quick_actions.slash_input_action"
            >
              <Icon
                color="rgba(63,67,80,0.64)"
                name="slash-forward-box-outline"
                size={24}
              />
            </View>
            <View
              accessibilityState={
                {
                  "disabled": false,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "opacity": 1,
                  "padding": 10,
                }
              }
              testID="post_draft.quick_actions.file_action"
            >
              <Icon
                color="rgba(63,67,80,0.64)"
                name="file-text-outline"
                size={24}
              />
            </View>
            <View
              accessibilityState={
                {
                  "disabled": false,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "opacity": 1,
                  "padding": 10,
                }
              }
              testID="post_draft.quick_actions.image_action"
            >
              <Icon
                color="rgba(63,67,80,0.64)"
                name="image-outline"
                size={24}
              />
            </View>
            <View
              accessibilityState={
                {
                  "disabled": false,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "opacity": 1,
                  "padding": 10,
                }
              }
              testID="post_draft.quick_actions.camera_action"
            >
              <Icon
                color="rgba(63,67,80,0.64)"
                name="camera-outline"
                size={24}
              />
            </View>
          </View>
          <View
            style={
              {
                "justifyContent": "flex-end",
                "paddingRight": 8,
              }
            }
            testID="post_draft.send_action.send.button.disabled"
          >
            <View
              style={
                [
                  {
                    "alignItems": "center",
                    "backgroundColor": "#1c58d9",
                    "borderRadius": 4,
                    "height": 32,
                    "justifyContent": "center",
                    "width": 80,
                  },
                  {
                    "backgroundColor": "rgba(28,88,217,0.3)",
                  },
                ]
              }
            >
              <Icon
                color="rgba(255,255,255,0.5)"
                name="send"
                size={24}
              />
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </RNCSafeAreaView>
</KeyboardTrackingView>
`;

exports[`PostDraft Should render the ReadOnly for canPost 1`] = `
<RNCSafeAreaView
  edges={
    [
      "bottom",
    ]
  }
  style={
    {
      "backgroundColor": "rgba(63,67,80,0.04)",
    }
  }
>
  <View
    style={
      {
        "alignItems": "center",
        "borderTopColor": "rgba(63,67,80,0.2)",
        "borderTopWidth": 1,
        "flexDirection": "row",
        "height": 50,
        "paddingHorizontal": 12,
      }
    }
    testID="post_draft.read_only"
  >
    <Icon
      color="#3f4350"
      name="glasses"
      style={
        {
          "fontSize": 20,
          "lineHeight": 22,
          "opacity": 0.56,
        }
      }
    />
    <Text
      style={
        {
          "color": "#3f4350",
          "fontSize": 15,
          "lineHeight": 20,
          "marginLeft": 9,
          "opacity": 0.56,
        }
      }
    >
      This channel is read-only.
    </Text>
  </View>
</RNCSafeAreaView>
`;

exports[`PostDraft Should render the ReadOnly for channelIsReadOnly 1`] = `
<RNCSafeAreaView
  edges={
    [
      "bottom",
    ]
  }
  style={
    {
      "backgroundColor": "rgba(63,67,80,0.04)",
    }
  }
>
  <View
    style={
      {
        "alignItems": "center",
        "borderTopColor": "rgba(63,67,80,0.2)",
        "borderTopWidth": 1,
        "flexDirection": "row",
        "height": 50,
        "paddingHorizontal": 12,
      }
    }
    testID="post_draft.read_only"
  >
    <Icon
      color="#3f4350"
      name="glasses"
      style={
        {
          "fontSize": 20,
          "lineHeight": 22,
          "opacity": 0.56,
        }
      }
    />
    <Text
      style={
        {
          "color": "#3f4350",
          "fontSize": 15,
          "lineHeight": 20,
          "marginLeft": 9,
          "opacity": 0.56,
        }
      }
    >
      This channel is read-only.
    </Text>
  </View>
</RNCSafeAreaView>
`;
